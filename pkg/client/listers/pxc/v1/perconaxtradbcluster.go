/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/Percona-Lab/pxc-service-broker/pkg/apis/pxc/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PerconaXtraDBClusterLister helps list PerconaXtraDBClusters.
type PerconaXtraDBClusterLister interface {
	// List lists all PerconaXtraDBClusters in the indexer.
	List(selector labels.Selector) (ret []*v1.PerconaXtraDBCluster, err error)
	// PerconaXtraDBClusters returns an object that can list and get PerconaXtraDBClusters.
	PerconaXtraDBClusters(namespace string) PerconaXtraDBClusterNamespaceLister
	PerconaXtraDBClusterListerExpansion
}

// perconaXtraDBClusterLister implements the PerconaXtraDBClusterLister interface.
type perconaXtraDBClusterLister struct {
	indexer cache.Indexer
}

// NewPerconaXtraDBClusterLister returns a new PerconaXtraDBClusterLister.
func NewPerconaXtraDBClusterLister(indexer cache.Indexer) PerconaXtraDBClusterLister {
	return &perconaXtraDBClusterLister{indexer: indexer}
}

// List lists all PerconaXtraDBClusters in the indexer.
func (s *perconaXtraDBClusterLister) List(selector labels.Selector) (ret []*v1.PerconaXtraDBCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PerconaXtraDBCluster))
	})
	return ret, err
}

// PerconaXtraDBClusters returns an object that can list and get PerconaXtraDBClusters.
func (s *perconaXtraDBClusterLister) PerconaXtraDBClusters(namespace string) PerconaXtraDBClusterNamespaceLister {
	return perconaXtraDBClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PerconaXtraDBClusterNamespaceLister helps list and get PerconaXtraDBClusters.
type PerconaXtraDBClusterNamespaceLister interface {
	// List lists all PerconaXtraDBClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.PerconaXtraDBCluster, err error)
	// Get retrieves the PerconaXtraDBCluster from the indexer for a given namespace and name.
	Get(name string) (*v1.PerconaXtraDBCluster, error)
	PerconaXtraDBClusterNamespaceListerExpansion
}

// perconaXtraDBClusterNamespaceLister implements the PerconaXtraDBClusterNamespaceLister
// interface.
type perconaXtraDBClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PerconaXtraDBClusters in the indexer for a given namespace.
func (s perconaXtraDBClusterNamespaceLister) List(selector labels.Selector) (ret []*v1.PerconaXtraDBCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PerconaXtraDBCluster))
	})
	return ret, err
}

// Get retrieves the PerconaXtraDBCluster from the indexer for a given namespace and name.
func (s perconaXtraDBClusterNamespaceLister) Get(name string) (*v1.PerconaXtraDBCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("perconaxtradbcluster"), name)
	}
	return obj.(*v1.PerconaXtraDBCluster), nil
}
