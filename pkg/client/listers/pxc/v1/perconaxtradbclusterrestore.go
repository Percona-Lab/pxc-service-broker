/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/Percona-Lab/pxc-service-broker/pkg/apis/pxc/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PerconaXtraDBClusterRestoreLister helps list PerconaXtraDBClusterRestores.
type PerconaXtraDBClusterRestoreLister interface {
	// List lists all PerconaXtraDBClusterRestores in the indexer.
	List(selector labels.Selector) (ret []*v1.PerconaXtraDBClusterRestore, err error)
	// PerconaXtraDBClusterRestores returns an object that can list and get PerconaXtraDBClusterRestores.
	PerconaXtraDBClusterRestores(namespace string) PerconaXtraDBClusterRestoreNamespaceLister
	PerconaXtraDBClusterRestoreListerExpansion
}

// perconaXtraDBClusterRestoreLister implements the PerconaXtraDBClusterRestoreLister interface.
type perconaXtraDBClusterRestoreLister struct {
	indexer cache.Indexer
}

// NewPerconaXtraDBClusterRestoreLister returns a new PerconaXtraDBClusterRestoreLister.
func NewPerconaXtraDBClusterRestoreLister(indexer cache.Indexer) PerconaXtraDBClusterRestoreLister {
	return &perconaXtraDBClusterRestoreLister{indexer: indexer}
}

// List lists all PerconaXtraDBClusterRestores in the indexer.
func (s *perconaXtraDBClusterRestoreLister) List(selector labels.Selector) (ret []*v1.PerconaXtraDBClusterRestore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PerconaXtraDBClusterRestore))
	})
	return ret, err
}

// PerconaXtraDBClusterRestores returns an object that can list and get PerconaXtraDBClusterRestores.
func (s *perconaXtraDBClusterRestoreLister) PerconaXtraDBClusterRestores(namespace string) PerconaXtraDBClusterRestoreNamespaceLister {
	return perconaXtraDBClusterRestoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PerconaXtraDBClusterRestoreNamespaceLister helps list and get PerconaXtraDBClusterRestores.
type PerconaXtraDBClusterRestoreNamespaceLister interface {
	// List lists all PerconaXtraDBClusterRestores in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.PerconaXtraDBClusterRestore, err error)
	// Get retrieves the PerconaXtraDBClusterRestore from the indexer for a given namespace and name.
	Get(name string) (*v1.PerconaXtraDBClusterRestore, error)
	PerconaXtraDBClusterRestoreNamespaceListerExpansion
}

// perconaXtraDBClusterRestoreNamespaceLister implements the PerconaXtraDBClusterRestoreNamespaceLister
// interface.
type perconaXtraDBClusterRestoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PerconaXtraDBClusterRestores in the indexer for a given namespace.
func (s perconaXtraDBClusterRestoreNamespaceLister) List(selector labels.Selector) (ret []*v1.PerconaXtraDBClusterRestore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PerconaXtraDBClusterRestore))
	})
	return ret, err
}

// Get retrieves the PerconaXtraDBClusterRestore from the indexer for a given namespace and name.
func (s perconaXtraDBClusterRestoreNamespaceLister) Get(name string) (*v1.PerconaXtraDBClusterRestore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("perconaxtradbclusterrestore"), name)
	}
	return obj.(*v1.PerconaXtraDBClusterRestore), nil
}
