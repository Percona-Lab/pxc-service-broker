/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/Percona-Lab/pxc-service-broker/pkg/apis/pxc/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PerconaXtraDBClusterBackupLister helps list PerconaXtraDBClusterBackups.
type PerconaXtraDBClusterBackupLister interface {
	// List lists all PerconaXtraDBClusterBackups in the indexer.
	List(selector labels.Selector) (ret []*v1.PerconaXtraDBClusterBackup, err error)
	// PerconaXtraDBClusterBackups returns an object that can list and get PerconaXtraDBClusterBackups.
	PerconaXtraDBClusterBackups(namespace string) PerconaXtraDBClusterBackupNamespaceLister
	PerconaXtraDBClusterBackupListerExpansion
}

// perconaXtraDBClusterBackupLister implements the PerconaXtraDBClusterBackupLister interface.
type perconaXtraDBClusterBackupLister struct {
	indexer cache.Indexer
}

// NewPerconaXtraDBClusterBackupLister returns a new PerconaXtraDBClusterBackupLister.
func NewPerconaXtraDBClusterBackupLister(indexer cache.Indexer) PerconaXtraDBClusterBackupLister {
	return &perconaXtraDBClusterBackupLister{indexer: indexer}
}

// List lists all PerconaXtraDBClusterBackups in the indexer.
func (s *perconaXtraDBClusterBackupLister) List(selector labels.Selector) (ret []*v1.PerconaXtraDBClusterBackup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PerconaXtraDBClusterBackup))
	})
	return ret, err
}

// PerconaXtraDBClusterBackups returns an object that can list and get PerconaXtraDBClusterBackups.
func (s *perconaXtraDBClusterBackupLister) PerconaXtraDBClusterBackups(namespace string) PerconaXtraDBClusterBackupNamespaceLister {
	return perconaXtraDBClusterBackupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PerconaXtraDBClusterBackupNamespaceLister helps list and get PerconaXtraDBClusterBackups.
type PerconaXtraDBClusterBackupNamespaceLister interface {
	// List lists all PerconaXtraDBClusterBackups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.PerconaXtraDBClusterBackup, err error)
	// Get retrieves the PerconaXtraDBClusterBackup from the indexer for a given namespace and name.
	Get(name string) (*v1.PerconaXtraDBClusterBackup, error)
	PerconaXtraDBClusterBackupNamespaceListerExpansion
}

// perconaXtraDBClusterBackupNamespaceLister implements the PerconaXtraDBClusterBackupNamespaceLister
// interface.
type perconaXtraDBClusterBackupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PerconaXtraDBClusterBackups in the indexer for a given namespace.
func (s perconaXtraDBClusterBackupNamespaceLister) List(selector labels.Selector) (ret []*v1.PerconaXtraDBClusterBackup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PerconaXtraDBClusterBackup))
	})
	return ret, err
}

// Get retrieves the PerconaXtraDBClusterBackup from the indexer for a given namespace and name.
func (s perconaXtraDBClusterBackupNamespaceLister) Get(name string) (*v1.PerconaXtraDBClusterBackup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("perconaxtradbclusterbackup"), name)
	}
	return obj.(*v1.PerconaXtraDBClusterBackup), nil
}
